// this file maps the DB tables as Rust structures
// decorators mean:
// (De)Serialize => can be used to (de)serialize data in JSON
// Queryable => can be used to represent entities in result set generated by queries
// ... there are many more ...

use serde_derive::{Serialize, Deserialize};
use crate::schema::users;
use crate::schema::userauth;
use crate::auth::Auth;

#[derive(Queryable, Clone, Serialize, Deserialize, Debug, Default, Insertable, AsChangeset, Identifiable, PartialEq)]
pub struct User {
    pub id: i32,
    pub password: String,
    pub email: String,
    // TODO: rename this field to "is_active" ffs
    pub active: bool
}

#[derive(Queryable, Serialize, Deserialize, Debug, Insertable)]
#[table_name = "userauth"]
pub struct UserAuth {
    pub id: i32,
    pub user_id: i32,
    pub token: String,
}

#[derive(Queryable, Serialize, Deserialize, Debug, Insertable)]
#[table_name = "userauth"]
pub struct UserAuthInsert {
    pub user_id: i32,
    pub token: String,
}

#[derive(Serialize, Deserialize, Debug)]
pub struct UserAuthFull {
    pub user_id: i32,
    pub token: String,
    pub email: String,
    pub is_active: bool
}

#[derive(Queryable, Serialize, Deserialize, Debug, Default)]
pub struct Door {
    pub id: i32,
    pub name: String,
    pub address: String,
    pub buzzer_url: String,
    pub ring: bool,
    pub ring_ts: Option<i32>,
}

impl User {

    // generate tokens for signup + logins
    pub fn to_user_auth(&self) -> UserAuthFull {
        let auth = Auth::new(self.id);
        let token = auth.generate_token(&self.email);
        eprintln!("DBG (models) generated token: {}", token);

        UserAuthFull {
            user_id: self.id,
            email: self.email.clone(),
            token: token,
            is_active: self.active
        }
    }
}
